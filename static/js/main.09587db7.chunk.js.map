{"version":3,"sources":["Components/Header.js","Components/SubmitForm.js","Components/Todo.js","Components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","header","display","Header","props","className","numOfTodo","SubmitForm","state","term","handleSubmit","e","preventDefault","onFormSubmit","setState","onSubmit","this","type","placeholder","value","onChange","target","Component","Todo","content","class","onClick","onDelete","id","ToDoList","todos","tasks","map","todo","index","key","App","handleDelete","updateTasks","Array","from","splice","task","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OAGMA,EAAYC,YAAW,CACzBC,OAAQ,CACRC,QAAS,YAgBEC,EAZA,SAACC,GACIL,IAChB,OACI,yBAAKM,UAAU,eACX,wBAAIA,UAAU,4BAAd,YACcD,EAAME,UADpB,aCaGC,E,4MAvBXC,MAAQ,CAACC,KAAM,I,EACfC,aAAe,SAACC,GACZA,EAAEC,iBACoB,IAAnB,EAAKJ,MAAMC,OACd,EAAKL,MAAMS,aAAa,EAAKL,MAAMC,MACnC,EAAKK,SAAS,CAACL,KAAM,O,uDAEhB,IAAD,OACJ,OACI,0BAAMM,SAAUC,KAAKN,cACjB,2BACAO,KAAO,OACPZ,UAAY,QACZa,YAAc,kBACdC,MAASH,KAAKR,MAAMC,KACpBW,SAAU,SAACT,GAAD,OAAO,EAAKG,SAAS,CAACL,KAAME,EAAEU,OAAOF,WAE/C,4BAAQd,UAAU,gCAAlB,gB,GAlBSiB,aCSVC,EATF,SAACnB,GACV,OACI,yBAAKC,UAAU,aACVD,EAAMoB,QACP,4BAAQC,MAAM,yBAAyBC,QAAS,WAAOtB,EAAMuB,SAASvB,EAAMwB,SCYzEC,EAhBE,SAACzB,GAKd,IAAM0B,EAAQ1B,EAAM2B,MAAMC,KAAI,SAACC,EAAMC,GACjC,OAAO,kBAAC,EAAD,CAAMV,QAASS,EAAME,IAAKD,EAAON,GAAIM,EAAOP,SAAUvB,EAAMuB,cAGvE,OACI,yBAAKtB,UAAU,gBACVyB,ICwBEM,G,wNA1Bb5B,MAAQ,CACNuB,MAAO,CAAC,8BAA+B,mBAAoB,2B,EAE7DM,aAAe,SAACH,GACd,IAAMI,EAAcC,MAAMC,KAAK,EAAKhC,MAAMuB,OAE1CO,EAAYG,OAAOP,EAAO,GAC1B,EAAKpB,SAAS,CAACiB,MAAOO,K,EAExB5B,aAAe,SAAAgC,GACb,EAAK5B,SAAS,CAACiB,MAAM,GAAD,mBAAM,EAAKvB,MAAMuB,OAAjB,CAAwBW,O,uDAG5C,OACE,yBAAKrC,UAAU,WACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAQC,UAAWU,KAAKR,MAAMuB,MAAMY,SACpC,kBAAC,EAAD,CAAY9B,aAAcG,KAAKN,eAC/B,kBAAC,EAAD,CAAUqB,MAAOf,KAAKR,MAAMuB,MAAOJ,SAAUX,KAAKqB,qB,GAnB1Cf,cCEEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.09587db7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n    header: {    \n    display: 'inline',\n    }\n});\n\nconst Header = (props) => {\n    const classes = useStyles();\n    return (\n        <div className='card-header'>\n            <h1 className='card-header-title header'>      \n                You have {props.numOfTodo} tasks!\n            </h1>\n        </div>\n        \n    )\n}\n\nexport default Header\n","import React, { Component } from \"react\";\n\nclass SubmitForm extends Component{\n    state = {term: ''}\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if(this.state.term == '') return;\n        this.props.onFormSubmit(this.state.term);\n        this.setState({term: ''});\n    }\n    render(){\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <input \n                type = 'text'\n                className = 'input'\n                placeholder = 'Enter Task Name'\n                value = {this.state.term}\n                onChange={(e) => this.setState({term: e.target.value})}\n                />\n                <button className='button is-primary is-focused'> Submit</button>\n            </form>\n        );\n    }\n}\n\nexport default SubmitForm","import React from 'react'\n\nconst Todo = (props) => {\n    return(\n        <div className='list-item'>\n            {props.content}\n            <button class='delete is-pulled-right' onClick={() => {props.onDelete(props.id)}}></button>\n        </div>\n    );\n}\n\nexport default Todo","import React from 'react'\nimport Todo from './Todo'\nconst ToDoList = (props) => {\n    // let new_array = arr.map(function callback( currentValue[, index[, array]]) {\n    // return element for new_array\n    // }[, thisArg])\n\n    const todos = props.tasks.map((todo, index) => {\n        return <Todo content={todo} key={index} id={index} onDelete={props.onDelete}/>\n    })\n\n    return (\n        <div className='list-wrapper'>\n            {todos}\n        </div>\n    );\n}\n\nexport default ToDoList","import React, { Component } from 'react';\nimport Header from './Components/Header'\nimport SubmitForm from './Components/SubmitForm'\nimport ToDoList from './Components/ToDoList'\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\nimport './App.css';\n\n// following a tutorial on building a to-do list app with react\n// https://medium.com/javascript-in-plain-english/build-a-simple-todo-app-with-react-561579b39ad1\n\nclass App extends Component {\n  state = {\n    tasks: ['Assignment due this weekend', 'Water the plants', 'Zoom call with friends']\n  }\n  handleDelete = (index) => {\n    const updateTasks = Array.from(this.state.tasks)\n    // array.splice(index, howmany, item1, ....., itemX)\n    updateTasks.splice(index, 1); // delete the element at that index\n    this.setState({tasks: updateTasks});\n  }\n  handleSubmit = task => {\n    this.setState({tasks: [...this.state.tasks, task]});\n  }\n  render(){\n    return (\n      <div className='wrapper'>\n        <div className='card frame'>\n          <Header numOfTodo={this.state.tasks.length} />\n          <SubmitForm onFormSubmit={this.handleSubmit}/>\n          <ToDoList tasks={this.state.tasks} onDelete={this.handleDelete}/>\n        </div>\n        \n      </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}